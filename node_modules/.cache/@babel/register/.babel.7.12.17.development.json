{
  "{\"sourceRoot\":\"C:\\\\Users\\\\K300044\\\\projects\\\\mocha-and-chai\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\K300044\\\\projects\\\\mocha-and-chai\",\"filename\":\"C:\\\\Users\\\\K300044\\\\projects\\\\mocha-and-chai\\\\app.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\K300044\\\\projects\\\\mocha-and-chai\",\"plugins\":[],\"presets\":[]}:7.12.17": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\K300044\\projects\\mocha-and-chai\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\K300044\\projects\\mocha-and-chai",
      "filename": "C:\\Users\\K300044\\projects\\mocha-and-chai\\app.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\K300044\\projects\\mocha-and-chai",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\K300044\\projects\\mocha-and-chai\\app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\K300044\\projects\\mocha-and-chai\\app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\K300044\\projects\\mocha-and-chai\\",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = 3000;\n\nconst MongoClient = require('mongodb').MongoClient;\n\nconst mongoUrl = 'mongodb://127.0.0.1:27017';\nconst db_name = 'userdata';\nconst collection_name = 'userlist';\nlet db;\nMongoClient.connect(mongoUrl, {\n  useNewUrlParser: true\n}, (err, client) => {\n  if (err) throw err;\n  db = client.db(db_name);\n  app.listen(port, () => {\n    console.log('Express API is running on port ' + port);\n  });\n});\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\napp.get('/', (req, res) => {\n  res.send('Express API is working ...');\n}); //POST request to add user into db\n\napp.post('/addUser', (req, res) => {\n  if (req.body.name) {\n    // valid name\n    db.collection(collection_name).insertOne(req.body).then(result => {\n      res.send(\"data inserted ...\");\n      console.log(\"result : \", result.ops);\n    }).catch(err => console.error(`Failed to insert item: ${err}`));\n  } else {\n    res.sendStatus(400);\n  }\n}); //GET request to query db by user name\n\napp.get('/getUser/:name', (req, res) => {\n  const name = req.params.name;\n  console.log(\"req.params.name : \", req.params.name);\n  db.collection(collection_name).find({\n    \"name\": name\n  }).toArray((err, result) => {\n    if (err) throw err;\n    if (result.length) res.send(result);else res.sendStatus(404);\n  });\n}); //PUT request to update user data into db\n\napp.put('/updateUser', (req, res) => {\n  if (req.body.name) {\n    // valid name\n    console.log(\"req.body.name : \", req.body.name);\n    db.collection(collection_name).findOneAndUpdate({\n      \"name\": req.body.name\n    }, {\n      $set: {\n        name: req.body.name,\n        city: req.body.city,\n        job: req.body.job\n      }\n    }, {\n      upsert: true\n    }, (err, result) => {\n      if (err) return res.send(err);\n      res.send(result);\n    });\n  } else {\n    res.sendStatus(400);\n  }\n}); //DELETE request to delete user data from db\n\napp.delete('/deleteUser/:name', (req, res) => {\n  const name = req.params.name;\n  console.log(\"req.params.name : \", req.params.name);\n  db.collection(collection_name).findOneAndDelete({\n    \"name\": name\n  }, (err, result) => {\n    if (err) return res.send(500, err);\n    console.log(result);\n    if (result.value) res.send({\n      message: 'deleted ...'\n    });else res.sendStatus(404);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "express",
        "require",
        "bodyParser",
        "app",
        "port",
        "MongoClient",
        "mongoUrl",
        "db_name",
        "collection_name",
        "db",
        "connect",
        "useNewUrlParser",
        "err",
        "client",
        "listen",
        "console",
        "log",
        "use",
        "urlencoded",
        "extended",
        "json",
        "get",
        "req",
        "res",
        "send",
        "post",
        "body",
        "name",
        "collection",
        "insertOne",
        "then",
        "result",
        "ops",
        "catch",
        "error",
        "sendStatus",
        "params",
        "find",
        "toArray",
        "length",
        "put",
        "findOneAndUpdate",
        "$set",
        "city",
        "job",
        "upsert",
        "delete",
        "findOneAndDelete",
        "value",
        "message"
      ],
      "mappings": "AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAME,GAAG,GAAGH,OAAO,EAAnB;AACA,MAAMI,IAAI,GAAG,IAAb;;AAEA,MAAMC,WAAW,GAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBI,WAAvC;;AACA,MAAMC,QAAQ,GAAG,2BAAjB;AACA,MAAMC,OAAO,GAAG,UAAhB;AACA,MAAMC,eAAe,GAAG,UAAxB;AACA,IAAIC,EAAJ;AAEAJ,WAAW,CAACK,OAAZ,CAAoBJ,QAApB,EAA8B;AAAEK,EAAAA,eAAe,EAAE;AAAnB,CAA9B,EAAyD,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACtE,MAAID,GAAJ,EAAS,MAAMA,GAAN;AAETH,EAAAA,EAAE,GAAGI,MAAM,CAACJ,EAAP,CAAUF,OAAV,CAAL;AACAJ,EAAAA,GAAG,CAACW,MAAJ,CAAWV,IAAX,EAAiB,MAAM;AACnBW,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCZ,IAAhD;AACH,GAFD;AAGH,CAPD;AASAD,GAAG,CAACc,GAAJ,CAAQf,UAAU,CAACgB,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAhB,GAAG,CAACc,GAAJ,CAAQf,UAAU,CAACkB,IAAX,EAAR;AAEAjB,GAAG,CAACkB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,4BAAT;AACH,CAFD,E,CAIA;;AACArB,GAAG,CAACsB,IAAJ,CAAS,UAAT,EAAqB,CAACH,GAAD,EAAMC,GAAN,KAAc;AAC/B,MAAID,GAAG,CAACI,IAAJ,CAASC,IAAb,EAAmB;AAAE;AACjBlB,IAAAA,EAAE,CAACmB,UAAH,CAAcpB,eAAd,EAA+BqB,SAA/B,CAAyCP,GAAG,CAACI,IAA7C,EACKI,IADL,CACUC,MAAM,IAAI;AACZR,MAAAA,GAAG,CAACC,IAAJ,CAAS,mBAAT;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBe,MAAM,CAACC,GAAhC;AACH,KAJL,EAKKC,KALL,CAKWrB,GAAG,IAAIG,OAAO,CAACmB,KAAR,CAAe,0BAAyBtB,GAAI,EAA5C,CALlB;AAMH,GAPD,MAOO;AACHW,IAAAA,GAAG,CAACY,UAAJ,CAAe,GAAf;AACH;AAEJ,CAZD,E,CAcA;;AACAhC,GAAG,CAACkB,GAAJ,CAAQ,gBAAR,EAA0B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAEpC,QAAMI,IAAI,GAAGL,GAAG,CAACc,MAAJ,CAAWT,IAAxB;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCM,GAAG,CAACc,MAAJ,CAAWT,IAA7C;AAEAlB,EAAAA,EAAE,CAACmB,UAAH,CAAcpB,eAAd,EACK6B,IADL,CACU;AAAE,YAAQV;AAAV,GADV,EAC4BW,OAD5B,CACoC,CAAC1B,GAAD,EAAMmB,MAAN,KAAiB;AAC7C,QAAInB,GAAJ,EAAS,MAAMA,GAAN;AACT,QAAImB,MAAM,CAACQ,MAAX,EAAmBhB,GAAG,CAACC,IAAJ,CAASO,MAAT,EAAnB,KACKR,GAAG,CAACY,UAAJ,CAAe,GAAf;AACR,GALL;AAOH,CAZD,E,CAcA;;AACAhC,GAAG,CAACqC,GAAJ,CAAQ,aAAR,EAAuB,CAAClB,GAAD,EAAMC,GAAN,KAAc;AACjC,MAAID,GAAG,CAACI,IAAJ,CAASC,IAAb,EAAmB;AAAE;AACjBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCM,GAAG,CAACI,IAAJ,CAASC,IAAzC;AACAlB,IAAAA,EAAE,CAACmB,UAAH,CAAcpB,eAAd,EACKiC,gBADL,CACsB;AAAE,cAAQnB,GAAG,CAACI,IAAJ,CAASC;AAAnB,KADtB,EACiD;AACzCe,MAAAA,IAAI,EAAE;AACFf,QAAAA,IAAI,EAAEL,GAAG,CAACI,IAAJ,CAASC,IADb;AAEFgB,QAAAA,IAAI,EAAErB,GAAG,CAACI,IAAJ,CAASiB,IAFb;AAGFC,QAAAA,GAAG,EAAEtB,GAAG,CAACI,IAAJ,CAASkB;AAHZ;AADmC,KADjD,EAOO;AACCC,MAAAA,MAAM,EAAE;AADT,KAPP,EASO,CAACjC,GAAD,EAAMmB,MAAN,KAAiB;AAChB,UAAInB,GAAJ,EAAS,OAAOW,GAAG,CAACC,IAAJ,CAASZ,GAAT,CAAP;AACTW,MAAAA,GAAG,CAACC,IAAJ,CAASO,MAAT;AACH,KAZL;AAaH,GAfD,MAeO;AACHR,IAAAA,GAAG,CAACY,UAAJ,CAAe,GAAf;AACH;AAGJ,CArBD,E,CAuBA;;AACAhC,GAAG,CAAC2C,MAAJ,CAAW,mBAAX,EAAgC,CAACxB,GAAD,EAAMC,GAAN,KAAc;AAC1C,QAAMI,IAAI,GAAGL,GAAG,CAACc,MAAJ,CAAWT,IAAxB;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCM,GAAG,CAACc,MAAJ,CAAWT,IAA7C;AAEAlB,EAAAA,EAAE,CAACmB,UAAH,CAAcpB,eAAd,EAA+BuC,gBAA/B,CAAgD;AAC5C,YAAQpB;AADoC,GAAhD,EAEG,CAACf,GAAD,EAAMmB,MAAN,KAAiB;AAChB,QAAInB,GAAJ,EAAS,OAAOW,GAAG,CAACC,IAAJ,CAAS,GAAT,EAAcZ,GAAd,CAAP;AACTG,IAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ;AACA,QAAIA,MAAM,CAACiB,KAAX,EAAkBzB,GAAG,CAACC,IAAJ,CAAS;AAAEyB,MAAAA,OAAO,EAAE;AAAX,KAAT,EAAlB,KACK1B,GAAG,CAACY,UAAJ,CAAe,GAAf;AAER,GARD;AASH,CAbD",
      "sourceRoot": "C:\\Users\\K300044\\projects\\mocha-and-chai\\",
      "sourcesContent": [
        "const express = require('express');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express()\r\nconst port = 3000\r\n\r\nconst MongoClient = require('mongodb').MongoClient\r\nconst mongoUrl = 'mongodb://127.0.0.1:27017'\r\nconst db_name = 'userdata'\r\nconst collection_name = 'userlist'\r\nlet db\r\n\r\nMongoClient.connect(mongoUrl, { useNewUrlParser: true }, (err, client) => {\r\n    if (err) throw err\r\n\r\n    db = client.db(db_name)\r\n    app.listen(port, () => {\r\n        console.log('Express API is running on port ' + port)\r\n    })\r\n})\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(bodyParser.json())\r\n\r\napp.get('/', (req, res) => {\r\n    res.send('Express API is working ...')\r\n})\r\n\r\n//POST request to add user into db\r\napp.post('/addUser', (req, res) => {\r\n    if (req.body.name) { // valid name\r\n        db.collection(collection_name).insertOne(req.body)\r\n            .then(result => {\r\n                res.send(\"data inserted ...\")\r\n                console.log(\"result : \", result.ops)\r\n            })\r\n            .catch(err => console.error(`Failed to insert item: ${err}`))\r\n    } else {\r\n        res.sendStatus(400)\r\n    }\r\n\r\n})\r\n\r\n//GET request to query db by user name\r\napp.get('/getUser/:name', (req, res) => {\r\n\r\n    const name = req.params.name\r\n    console.log(\"req.params.name : \", req.params.name)\r\n\r\n    db.collection(collection_name)\r\n        .find({ \"name\": name }).toArray((err, result) => {\r\n            if (err) throw err\r\n            if (result.length) res.send(result)\r\n            else res.sendStatus(404)\r\n        })\r\n\r\n})\r\n\r\n//PUT request to update user data into db\r\napp.put('/updateUser', (req, res) => {\r\n    if (req.body.name) { // valid name\r\n        console.log(\"req.body.name : \", req.body.name)\r\n        db.collection(collection_name)\r\n            .findOneAndUpdate({ \"name\": req.body.name }, {\r\n                $set: {\r\n                    name: req.body.name,\r\n                    city: req.body.city,\r\n                    job: req.body.job\r\n                }\r\n            }, {\r\n                upsert: true\r\n            }, (err, result) => {\r\n                if (err) return res.send(err)\r\n                res.send(result)\r\n            })\r\n    } else {\r\n        res.sendStatus(400)\r\n    }\r\n\r\n\r\n})\r\n\r\n//DELETE request to delete user data from db\r\napp.delete('/deleteUser/:name', (req, res) => {\r\n    const name = req.params.name\r\n    console.log(\"req.params.name : \", req.params.name)\r\n\r\n    db.collection(collection_name).findOneAndDelete({\r\n        \"name\": name\r\n    }, (err, result) => {\r\n        if (err) return res.send(500, err)\r\n        console.log(result)\r\n        if (result.value) res.send({ message: 'deleted ...' })\r\n        else res.sendStatus(404)\r\n\r\n    })\r\n})"
      ]
    },
    "sourceType": "module",
    "mtime": 1613921343329
  }
}